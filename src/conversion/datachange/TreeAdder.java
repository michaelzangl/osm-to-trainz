package conversion.datachange;

import java.util.Random;

import conversion.ConversionData;
import conversion.datachange.geometry.GridPart;
import conversion.datachange.geometry.SimpleRectangle;
import conversion.landscape.Landscape;
import conversion.landscape.LandscapePolygon;
import data.osm.OsmNode;
import data.osm.Propertyable;
import data.osm.SimpleProperties;
import data.position.local.LatLon;
import data.position.local.LocalPoint;

/**
 * This class adds trees for every forest area.
 * 
 * @author michael
 */
public class TreeAdder {

	private static final SimpleProperties TREE_PROPERTIES =
	        new SimpleProperties("natural", "tree",//
	                "trainz:autogenerated", "yes");
	private static final SimpleProperties SCRUB_PROPERTIES =
	        new SimpleProperties("natural", "scrub",//
	                "trainz:autogenerated", "yes");
	private static final int POINTS_PER_GRIDSIDE = 100;
	private final ConversionData data;

	public TreeAdder(ConversionData data) {
		this.data = data;
	}

	public void addTrees() {
		Landscape landscape = data.getLandscape();
		for (GridPart part : landscape.getConvertedBlocks()) {
			addLandscapeObjects(part);
		}
	}

	private void addLandscapeObjects(GridPart part) {

		for (int x = 0; x < POINTS_PER_GRIDSIDE; x++) {
			for (int y = 0; y < POINTS_PER_GRIDSIDE; y++) {
				double wx =
				        (x + .5) / POINTS_PER_GRIDSIDE * GridPart.GRID_SPACING;
				double wy =
				        (y + .5) / POINTS_PER_GRIDSIDE * GridPart.GRID_SPACING;
				LocalPoint point =
				        new LocalPoint(part.getMinX() + wx, part.getMinY() + wy);

				LandscapePolygon way = data.getLandscape().getWayUnder(point);
				if (way != null) {
					SimpleProperties properties =
					        getPointProperties(way.getOriginal());
					if (properties != null) {
						LatLon pos = data.getConverter().toGlobal(point);
						OsmNode node =
						        new OsmNode(pos.getLat(), pos.getLon(),
						                properties);
						data.getOsmData().addNode(node);
					}
				}
			}
		}
	}

	/**
	 * Adds the trees for a given area.
	 * 
	 * @param way
	 *            The way that defines the area.
	 */
	private void addTrees(LandscapePolygon poly) {
		SimpleRectangle bounds = poly.getPolygon().getBounds();

		SimpleProperties properties = getPointProperties(poly.getOriginal());

		if (properties != null) {
			for (LocalPoint point : bounds.getPoints(10, new Random())) {
				if (poly.getPolygon().contains(point)) {
					LatLon pos = data.getConverter().toGlobal(point);
					OsmNode node =
					        new OsmNode(pos.getLat(), pos.getLon(), properties);
					data.getOsmData().addNode(node);
				}
			}
		}
	}

	private SimpleProperties getPointProperties(Propertyable area) {
		String natural = area.getProperty("natural");
		if ("forest".equals(area.getProperty("landuse"))) {
			return TREE_PROPERTIES;
		} else if ("scrub".equals(natural)) {
			return SCRUB_PROPERTIES;
		} else {
			return null;
		}
	}

}
